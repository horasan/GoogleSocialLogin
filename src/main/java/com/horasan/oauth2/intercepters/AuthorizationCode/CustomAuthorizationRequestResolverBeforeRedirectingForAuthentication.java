package com.horasan.oauth2.intercepters.AuthorizationCode;

import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.springframework.http.server.ServletServerHttpRequest;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizationRequestResolver;
import org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestResolver;
import org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;
import org.springframework.web.util.UriComponentsBuilder;

import com.horasan.util.AppUtil;
import com.horasan.util.LogType;


public class CustomAuthorizationRequestResolverBeforeRedirectingForAuthentication  implements OAuth2AuthorizationRequestResolver {
	
	private AppUtil appUtil;
	
    private OAuth2AuthorizationRequestResolver defaultResolver;

    public CustomAuthorizationRequestResolverBeforeRedirectingForAuthentication(ClientRegistrationRepository repo, String authorizationRequestBaseUri){
        // We will use DefaultOAuth2AuthorizationRequestResolver so heavy work will be done for us.
    	defaultResolver = new DefaultOAuth2AuthorizationRequestResolver(repo, authorizationRequestBaseUri);
    	appUtil = new AppUtil();
    	
    }

    @Override
    public OAuth2AuthorizationRequest resolve(HttpServletRequest request) {
        OAuth2AuthorizationRequest req = defaultResolver.resolve(request);
        
        if(req != null){

        	appUtil.printToConsoleAndLog(LogType.FRONTEND, AppUtil.SINGLE_TAB, "[3] Resource Owner clicked 'Login via Google' button on the browser (User-Agent) (" + appUtil.getClientAgentFrontEndHome() + ")");
        	appUtil.printToConsoleAndLog(LogType.FRONTEND, AppUtil.SINGLE_TAB, "[4] The browser is redirected to '" + UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(request)).build().toUriString() + "' which is login service end point for Client (Spring Boot Application).", "https://spring.io/guides/tutorials/spring-boot-oauth2/  search for /oauth2/authorization/{registrationId}", null);
        	
        	appUtil.printToConsoleAndLog(LogType.GOOGLE_STEP, AppUtil.SINGLE_TAB, "[4] Create an anti-forgery state token", "https://developers.google.com/identity/protocols/oauth2/openid-connect#createxsrftoken", this.getClass().getSimpleName());
        	appUtil.printToConsoleAndLog(LogType.NOTE, AppUtil.DOUBLE_TAB, "Anti-forgery state token is generated by DefaultOAuth2AuthorizationRequestResolver.");
        	appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.DOUBLE_TAB, "Anti-forgery state token will be sent as 'state' parameter.");
        	appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.DOUBLE_TAB, "Generated 'state' is " + req.getState());
        	
            req = customizeAuthorizationRequest(req);
            printAuthorizationRequestValues(req);
  
            appUtil.printToConsoleAndLog(LogType.GOOGLE_STEP, AppUtil.SINGLE_TAB, "[5] Send an authentication request to Google", "https://developers.google.com/identity/protocols/oauth2/openid-connect#sendauthrequest", this.getClass().getSimpleName());
            appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.DOUBLE_TAB, "Client (Spring Boot Application) sent an 'authentication code' request to " + req.getAuthorizationUri() + " (a.k.a. authorization_endpoint)", "https://accounts.google.com/.well-known/openid-configuration", null);
            appUtil.printToConsoleAndLog(LogType.FRONTEND, AppUtil.DOUBLE_TAB, "[4] The browser (User-Agent) redirected to 'Sign in with Google' page. Resource owner is asked to provide Google username/password and to give consent to Client (Spring Boot Application).");
            
         }
        return req;
    }
    
    @Override
    public OAuth2AuthorizationRequest resolve(HttpServletRequest request, String clientRegistrationId) {
        OAuth2AuthorizationRequest req = defaultResolver.resolve(request, clientRegistrationId);
        if(req != null){
            req = customizeAuthorizationRequest(req);
        }
        
        
        return req;
    }

    private OAuth2AuthorizationRequest customizeAuthorizationRequest(OAuth2AuthorizationRequest req) {
    	
    	appUtil.printToConsoleAndLog(LogType.NOTE, AppUtil.DOUBLE_TAB, "Additional parameters can be added to the Authorization Code request message.", null, this.getClass().getSimpleName());
    	return req;
    }
    
    private void printAuthorizationRequestValues(OAuth2AuthorizationRequest req) {
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.DOUBLE_TAB, "Authorization Code request message is prepared with the following parameters.", null, this.getClass().getSimpleName());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "AuthorizationRequestUri: " + req.getAuthorizationRequestUri());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "AuthorizationUri: " + req.getAuthorizationUri());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "ClientId: " +req.getClientId());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "RedirectUri: " +req.getRedirectUri());
    	 appUtil.printToConsoleAndLog(LogType.NOTE, AppUtil.TRIPLE_TAB, "If Resource Owner gives consent, response for 'Authorization Code request' will be sent to RedirectUri: '" + req.getRedirectUri() + "'.");
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "State: " +req.getState());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "GrantType: " +req.getGrantType().getValue());
    	 appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "ResponseType: " + req.getResponseType().getValue());
    	
    	String scopes = req.getScopes().stream().collect(Collectors.joining(","));
    	appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "Scopes: " + scopes);
    	appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "Authorization Code request message does not include 'client_secret'." );
    	appUtil.printToConsoleAndLog(LogType.OAUTH2, AppUtil.TRIPLE_TAB, "'Create an anti-forgery state token' is completed." );
    	
    	 
    }
}
